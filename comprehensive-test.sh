#!/bin/bash

echo "üß™ CTV PRESTIGE CONSTRUCTION - COMPREHENSIVE TEST SUITE"
echo "======================================================="

# Test Results Tracking
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Test function
run_test() {
    local test_name="$1"
    local test_command="$2"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo ""
    echo "üîç TEST: $test_name"
    echo "----------------------------------------"
    
    if eval "$test_command"; then
        echo "‚úÖ PASSED: $test_name"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        return 0
    else
        echo "‚ùå FAILED: $test_name"
        FAILED_TESTS=$((FAILED_TESTS + 1))
        return 1
    fi
}

# Test 1: Core Files Exist
run_test "Core Website Files" '
    missing=0
    for file in index.html styles-fresh.css script.js; do
        if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
        else
            echo "‚ùå $file missing"
            missing=$((missing + 1))
        fi
    done
    [ $missing -eq 0 ]
'

# Test 2: JavaScript Files
run_test "JavaScript Components" '
    missing=0
    for file in asset-manager.js image-recovery.js image-error-decoder.js image-loading-test.js; do
        if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
        else
            echo "‚ùå $file missing"
            missing=$((missing + 1))
        fi
    done
    [ $missing -eq 0 ]
'

# Test 3: Logo Asset
run_test "Logo Asset" '
    if [ -f "assets/Finallogo.png" ]; then
        size=$(ls -lh assets/Finallogo.png | awk "{print \$5}")
        echo "‚úÖ Logo exists ($size)"
        return 0
    else
        echo "‚ùå Logo missing"
        return 1
    fi
'

# Test 4: Portfolio Images
run_test "Portfolio Images" '
    total=0
    missing=0
    
    # Check welding images
    for img in welding-project-1.jpg welding-project-2.jpg; do
        total=$((total + 1))
        if [ -f "assets/sample-photos/welding/$img" ]; then
            echo "‚úÖ welding/$img"
        else
            echo "‚ùå welding/$img missing"
            missing=$((missing + 1))
        fi
    done
    
    # Check container repair images
    for img in container-repair-1.jpg container-repair-2.jpg; do
        total=$((total + 1))
        if [ -f "assets/sample-photos/container-repair/$img" ]; then
            echo "‚úÖ container-repair/$img"
        else
            echo "‚ùå container-repair/$img missing"
            missing=$((missing + 1))
        fi
    done
    
    # Check pressure washing images
    for img in pressure-washing-1.jpg pressure-washing-2.jpg; do
        total=$((total + 1))
        if [ -f "assets/sample-photos/pressure-washing/$img" ]; then
            echo "‚úÖ pressure-washing/$img"
        else
            echo "‚ùå pressure-washing/$img missing"
            missing=$((missing + 1))
        fi
    done
    
    echo "üìä Found $((total - missing))/$total portfolio images"
    [ $missing -eq 0 ]
'

# Test 5: File Permissions
run_test "File Permissions" '
    permission_issues=0
    
    # Check image permissions
    for dir in assets/sample-photos/welding assets/sample-photos/container-repair assets/sample-photos/pressure-washing; do
        if [ -d "$dir" ]; then
            for img in "$dir"/*.jpg; do
                if [ -f "$img" ]; then
                    perms=$(ls -l "$img" | cut -c1-10)
                    if [[ "$perms" =~ ^-r.+r.+r.+ ]]; then
                        echo "‚úÖ $(basename "$img") - readable"
                    else
                        echo "‚ùå $(basename "$img") - permission issue"
                        permission_issues=$((permission_issues + 1))
                    fi
                fi
            done
        fi
    done
    
    [ $permission_issues -eq 0 ]
'

# Test 6: HTML Structure
run_test "HTML Structure" '
    if [ -f "index.html" ]; then
        sections=("nav" "hero" "services" "contact")
        missing_sections=0
        
        for section in "${sections[@]}"; do
            if grep -q "class.*$section\|id.*$section" index.html; then
                echo "‚úÖ $section section found"
            else
                echo "‚ùå $section section missing"
                missing_sections=$((missing_sections + 1))
            fi
        done
        
        # Check for portfolio images in HTML
        image_count=$(grep -c "assets/sample-photos/" index.html)
        echo "üì∑ Portfolio images referenced: $image_count"
        
        [ $missing_sections -eq 0 ] && [ $image_count -ge 6 ]
    else
        return 1
    fi
'

# Test 7: CSS Validation
run_test "CSS Validation" '
    if [ -f "styles-fresh.css" ]; then
        # Check for syntax errors by looking for common issues
        syntax_errors=0
        
        # Check for unclosed braces
        open_braces=$(grep -o "{" styles-fresh.css | wc -l)
        close_braces=$(grep -o "}" styles-fresh.css | wc -l)
        
        if [ $open_braces -eq $close_braces ]; then
            echo "‚úÖ CSS braces balanced ($open_braces pairs)"
        else
            echo "‚ùå CSS braces unbalanced (open: $open_braces, close: $close_braces)"
            syntax_errors=$((syntax_errors + 1))
        fi
        
        # Check for CSS variables
        if grep -q ":root" styles-fresh.css && grep -q "--" styles-fresh.css; then
            echo "‚úÖ CSS variables defined"
        else
            echo "‚ùå CSS variables missing"
            syntax_errors=$((syntax_errors + 1))
        fi
        
        [ $syntax_errors -eq 0 ]
    else
        return 1
    fi
'

# Test 8: Responsive Design Elements
run_test "Responsive Design" '
    if [ -f "styles-fresh.css" ]; then
        media_queries=$(grep -c "@media" styles-fresh.css)
        
        if [ $media_queries -ge 2 ]; then
            echo "‚úÖ Responsive design implemented ($media_queries media queries)"
            return 0
        else
            echo "‚ùå Insufficient responsive design ($media_queries media queries)"
            return 1
        fi
    else
        return 1
    fi
'

# Test 9: Diagnostic Tools
run_test "Diagnostic Tools" '
    tools_found=0
    
    for tool in image-diagnostic-test.html fix-image-loading.sh IMAGE-LOADING-FIXES-COMPLETE.md; do
        if [ -f "$tool" ]; then
            echo "‚úÖ $tool available"
            tools_found=$((tools_found + 1))
        else
            echo "‚ö†Ô∏è  $tool missing (optional)"
        fi
    done
    
    # At least 1 diagnostic tool should exist
    [ $tools_found -ge 1 ]
'

# Test 10: Git Repository Status
run_test "Git Repository" '
    if [ -d ".git" ]; then
        echo "‚úÖ Git repository initialized"
        
        # Check if there are commits
        if git log --oneline -1 &>/dev/null; then
            latest_commit=$(git log --oneline -1)
            echo "‚úÖ Latest commit: $latest_commit"
        else
            echo "‚ö†Ô∏è  No commits found"
        fi
        
        # Check remote
        if git remote -v | grep -q "origin"; then
            remote=$(git remote get-url origin 2>/dev/null || echo "Unknown")
            echo "‚úÖ Remote configured: $remote"
        else
            echo "‚ö†Ô∏è  No remote configured"
        fi
        
        return 0
    else
        echo "‚ùå Not a git repository"
        return 1
    fi
'

# Final Report
echo ""
echo "üéØ FINAL TEST REPORT"
echo "===================="
echo "Total Tests Run: $TOTAL_TESTS"
echo "Tests Passed: $PASSED_TESTS"
echo "Tests Failed: $FAILED_TESTS"

# Calculate success rate
if [ $TOTAL_TESTS -gt 0 ]; then
    success_rate=$(( (PASSED_TESTS * 100) / TOTAL_TESTS ))
    echo "Success Rate: $success_rate%"
else
    success_rate=0
fi

echo ""
if [ $FAILED_TESTS -eq 0 ]; then
    echo "üéâ ALL TESTS PASSED!"
    echo "‚úÖ Website is fully functional and ready for deployment"
    echo "‚úÖ All components verified and working"
    echo "‚úÖ Images loading correctly"
    echo "‚úÖ Professional quality confirmed"
elif [ $success_rate -ge 80 ]; then
    echo "üéØ MOSTLY SUCCESSFUL ($success_rate%)"
    echo "‚úÖ Core functionality working"
    echo "‚ö†Ô∏è  $FAILED_TESTS minor issues detected"
    echo "üí° Review failed tests above for details"
else
    echo "‚ö†Ô∏è  ISSUES DETECTED ($success_rate%)"
    echo "‚ùå $FAILED_TESTS critical issues found"
    echo "üîß Review and fix failed tests before deployment"
fi

echo ""
echo "===================="
echo "Test completed: $(date)"
echo "===================="
